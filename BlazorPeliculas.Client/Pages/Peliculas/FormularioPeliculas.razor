@inject IHttpServicio httpServicio

<EditForm Model="Pelicula" OnValidSubmit="OnDataAnnotationsValidated">
	<DataAnnotationsValidator />

	<div class="mb-3">
		<label>Titulo:</label>
		<div>
			<InputText class="form-control" @bind-Value="@Pelicula.Nombre" />
			<ValidationMessage For="@(()=>Pelicula.Nombre)" />
		</div>
	</div>

	<div class="mb-3">
		<label>En Cartelera:</label>
		<div>
			<InputCheckbox @bind-Value="@Pelicula.EnCartelera" />
			<ValidationMessage For="@(()=>Pelicula.EnCartelera)" />
		</div>
	</div>

	<div class="mb-3">
		<label>Trailer:</label>
		<div>
			<InputText class="form-control" @bind-Value="@Pelicula.Trailer" />
			<ValidationMessage For="@(()=>Pelicula.Trailer)" />
		</div>
	</div>

	<div class="mb-3">
		<label>Fecha de Lanzamiento:</label>
		<div>
			<InputDate class="form-control" @bind-Value="@Pelicula.Lanzamiento" />
			<ValidationMessage For="@(()=>Pelicula.Lanzamiento)" />
		</div>
	</div>

	<div class="mb-3">
		<InputImg Label="Poster" ImagenSeleccionada="imagenSeleccionada" imagenURL="@imagenURL" />
	</div>

	<div class="mb-3 form-markdown">
		<InputMarkdown @bind-Value="@Pelicula.Resumen"
		For=@(()=> Pelicula.Resumen)
		Label="Resumen" />
	</div>

	<div class=mb-3>
		<label>Generos:</label>
		<div>
			<SelectorMultiple NoSeleccionados="NoSeleccionados" Seleccionados="Seleccionados">

			</SelectorMultiple>
		</div>
	</div>

	<div class="mb-3">
		<label>Actores:</label>
		<div>
			<SelectorMultipleTypeahead Context="Actor" SearchMethod="BuscarActores"
			ElementosSeleccionados="ActoresSeleccionados">
				<MyListTemplate>
					@Actor.Nombre / <input typeof="text" placeholder="Personaje" @bind="Actor.Personaje"/>
				</MyListTemplate>
				<MyResultTemplate>
					<img style="width: 50px" src="@Actor.Foto"/>
					@Actor.Nombre
				</MyResultTemplate>
			</SelectorMultipleTypeahead>
		</div>
	</div>

	<button class="btn btn-success">Guardar Cambios</button>

</EditForm>

@code {
	string? imagenURL;

	[Parameter]
	[EditorRequired]
	public PeliculaDTO Pelicula { get; set; } = null!;

	[Parameter]
	[EditorRequired]
	public EventCallback OnValidSubmit { get; set; }

	[Parameter]
	public List<GeneroDTO> GenerosSeleccionados { get; set; } = new List<GeneroDTO>();

	[Parameter]
	[EditorRequired]
	public List<GeneroDTO> GenerosNoSeleccionados { get; set; } = new List<GeneroDTO>();

	[Parameter]
	public List<ActorDTO> ActoresSeleccionados { get; set; } = new List<ActorDTO>();

	private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
	private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();



	protected override void OnInitialized()
	{
		if (!string.IsNullOrEmpty(Pelicula.Poster))
		{
			imagenURL = Pelicula.Poster;
			Pelicula.Poster = null;
		}

		Seleccionados =
		GenerosSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();

		NoSeleccionados =
		GenerosNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();

	}

	private void imagenSeleccionada(string imagenBase64)
	{
		Pelicula.Poster = imagenBase64;
		imagenURL = null;
	}

	private async Task<IEnumerable<ActorDTO>> BuscarActores(string searchText)
	{
		var respuestaHTTP = await httpServicio.Get<List<ActorDTO>>($"api/actores/buscar/{searchText}");
		return respuestaHTTP.Respuesta;
	}

	private async Task OnDataAnnotationsValidated()
	{
		Pelicula.GererosPelicula = Seleccionados
		.Select(x => new GeneroPeliculaDTO { GeneroId = int.Parse(x.Llave)}).ToList();


		//Actualmente esto funciona por el Proyecto Shared. En un futuro tengo que hacerlo mediante un DTO.
		Pelicula.PeliculasActor = ActoresSeleccionados
		.Select(x => new PeliculaActorDTO { ActorId = x.Id, Personaje = x.Personaje }).ToList();

		await OnValidSubmit.InvokeAsync();
	}
}
