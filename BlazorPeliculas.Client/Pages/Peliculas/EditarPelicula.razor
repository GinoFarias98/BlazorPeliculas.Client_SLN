@page "/peliculas/editar/{PeliculaId:int}"
@inject IHttpServicio httpServicio
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Editar Película</h3>

@if(Pelicula is null)
{
	<p>Cargando...</p>
}
else
{
	<FormularioPeliculas Pelicula="Pelicula" OnValidSubmit="Editar"
						 GenerosSeleccionados="GenerosSeleccionados" GenerosNoSeleccionados="GenerosNoSeleccionados"></FormularioPeliculas>
}

@code {

	PeliculaDTO? Pelicula;
	[Parameter]
	public int PeliculaId { get; set; }
	private List<GeneroDTO> GenerosNoSeleccionados = new List<GeneroDTO>();
	private List<GeneroDTO> GenerosSeleccionados = new List<GeneroDTO>();
	private List<ActorDTO> ActoresSeleccionados = new List<ActorDTO>();


	protected override async Task OnInitializedAsync()
	{
		var httpResponse = await httpServicio
		.Get<PeliculaActualizacionDTO>($"api/peliculas/actualizar/{PeliculaId}");

		if (httpResponse.Error)
		{
			if (httpResponse.httpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/");
			}
			else
			{
				var mensajeError = await httpResponse.ObtenerError();
				await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
			}
		}
		else
		{
			var modelo = httpResponse.Respuesta;
			ActoresSeleccionados = modelo.Actores;
			GenerosSeleccionados = modelo.GenerosSeleccionados;
			GenerosNoSeleccionados = modelo.GenerosNoSeleccionados;
			Pelicula = modelo.Pelicula;
		}
	}

	private void Editar()
	{
		Console.WriteLine("Editando Pelicula");
	}
}
